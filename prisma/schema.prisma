generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  mobile    String
  password  String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Cart      Cart[]    @relation("cartOfUser")
}

model Admin {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id                   Int                   @id @default(autoincrement())
  title                String                @unique
  description          String?               @db.VarChar(600)
  balance              Int
  minPrice             Int
  maxPrice             Int?
  categoryId           Int?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?             @updatedAt
  images               Image[]               @relation("productImage")
  productOptionalTypes ProductOptionalType[] @relation("productOptionalType")
  productCategorys     ProductCategory[]     @relation("productCategory")
}

model Category {
  id               Int               @id @default(autoincrement())
  title            String            @unique
  amountProduct    Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  categoryProducts ProductCategory[] @relation("categoryProduct")
}

model ProductCategory {
  id         Int       @id @default(autoincrement())
  productId  Int
  categoryId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  product    Product   @relation("productCategory", fields: [productId], references: [id])
  category   Category  @relation("categoryProduct", fields: [categoryId], references: [id])
}

model ProductOptionalType {
  id                   Int                   @id @default(autoincrement())
  title                String
  productId            Int
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?             @updatedAt
  product              Product               @relation("productOptionalType", fields: [productId], references: [id])
  productOptionalItems ProductOptionalItem[] @relation("optionalTypeItem")
}

model ProductOptionalItem {
  id                    Int                   @id @default(autoincrement())
  title                 String
  price                 Int?
  balance               Int?
  productOptionalTypeId Int
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?             @updatedAt
  images                Image[]               @relation("optionItemImage")
  productOptionalType   ProductOptionalType   @relation("optionalTypeItem", fields: [productOptionalTypeId], references: [id])
  primaryItem           CombineOptionalItem[] @relation("primaryItem")
  compoundItem          CombineOptionalItem[] @relation("compoundItem")
}

model CombineOptionalItem {
  id           Int                 @id @default(autoincrement())
  primaryId    Int
  compoundId   Int
  primaryItem  ProductOptionalItem @relation("primaryItem", fields: [primaryId], references: [id])
  compoundItem ProductOptionalItem @relation("compoundItem", fields: [compoundId], references: [id])
}

model Image {
  id                    Int                  @id @default(autoincrement())
  src                   String
  productId             Int
  productOptionalItemId Int?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime?            @updatedAt
  productOptionalItem   ProductOptionalItem? @relation("optionItemImage", fields: [productOptionalItemId], references: [id])
  product               Product              @relation("productImage", fields: [productId], references: [id])
}

model Cart {
  id             Int       @id @default(autoincrement())
  userId         String
  totalPrice     Int
  user           User      @relation("cartOfUser", fields: [userId], references: [id])
  createPayment  DateTime?
  successPayment DateTime?
}
